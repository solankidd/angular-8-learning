----------------------------
HTML TEMPLATE KEYWORDS

- *ngIf
- (featureSelected) => @Output
- [serverElements] => @Input

- [innerText]="allowNewServer" => property binding
- (click)="onCreateServer()" => event binding


----------------------------

how to create project:
1.

1. What happens behind the scenes
- how it detects what to load?
  - indexx.html is served by server
    - there is app-root tag
    - cli created app components
    - check app.component file
  - now at time of serve, cli will inject required javascript bundles
    -  these script contains our custom code as well

  - go to main.ts file
conclusion:
  1. cli inject javascript files into indexx file.
  2. first it will go to main.ts file (which is listed in angular.json file)
  3. where it will find bootstrap module (which is app.module)
  4. now app.module have bootstrap array which tell start with app.component
  5. app component have all the information about where to render


2. component
  - app component is root component
  - now go to serve component
  - now we need to register this new component to app.module
  - add it to declarations, so angular could know about component
  - generate compo: ng generate component servers
  - generate compo: ng g c servers
  - in component // required template / templateUrl
  - for parameter template: template: `html`
  - for parameter style: style: [`
    h3{
      color: blue
    }
  `]
  - for selector: 'app-servers' it is like css selector
  - for selector: '[app-servers]' it will select as attribute
  - for selector: '.app-servers' it will select as class
  - for selector: '#app-servers' it will select as id

  - for property binding in html = []
    - <p [innerText]="allowNewServer"></p>
  - for event binding ()
    - <button class="btn btn-primary" [disabled]="!allowNewServer" (click)="onCreateServer()">Add Server</button>
  - when any event is binned, you can pass $event as parameter, which is reserved for angular

  - *ngif is structural directive means it changes the structure of dom, * denotes that it is structural
  - for else condition you can check servers.component.html file

  -ngClass is similar to ngIf

  -*ngFor is also structural directive
  - <app-server *ngFor="let server of servers"></app-server>









- how to pass data to other component?
  - go to app component

  - structure
    - app-component
    --- app-cockpit
    Sample: 
    <app-cockpit
      [serverElements]="serverElementsAppCmp" ( => not in use inside app-cockpit)
      (serverCreatedAlias)="onServerAddedInsideCockpit($event)"
      (bluePrintCreated)="onBlueprintAddedInsideCockpit($event)">
    </app-cockpit>

  - here serverElementsAppCmp (this is array of object only) it is declared inside app-component.ts
    [now not in use]
    - serverElements is input for app-cockpit component
    - if we update serverElementsAppCmp, it will reach to app-cockpit as input


  - now bluePrintCreated is output in  app-cockpit
    - app-cockpit have UI to add blue bluePrint
    - when user hit 'Add Server Blueprint', app-cockpit will call bluePrintCreated, and emit some data putting inside it
    - as bluePrintCreated is output, app-cockpit will pass it on to upper level
    - on  app-component, we binded onBlueprintAddedInsideCockpit with bluePrintCreated
    - so onBlueprintAddedInsideCockpit wil receive emitted data
    - in app-component, when onBlueprintAddedInsideCockpit is called, inside that we will push new data into serverElementsAppCmp inside app-component itself
    - now this array serverElementsAppCmp is used in app-component directly
    - so app-cockpit is just container which is having form to create some objects and it is doing output of it, whatever function is binded there, that functino is receiving the emitted data

  - similarly,
    - app-server-element is having 'element' property
    - app-server-element is getting serverElement from app component

  - alias:
    - go to app-component
    - check <app-server-element
      *ngFor="let serverElement of serverElementsAppCmp"
      [element]="serverElement" aliasOutside="Alias test"></app-server-element>
    - here, aliasOutside is parameter we are passing to app-server-element
    - app-server-element ts file have @Input('aliasOutside') aliasInside;
    - so from outside it will be passed as aliasOutside and from inside component we can refer as
      aliasInside

  - custom event  emit
    - in cockpit we created events
      - @Output() serverCreated = new EventEmitter<{ serverName: string; serverContent: string }>();
      - @Output() bluePrintCreated = new EventEmitter<{ serverName: string; serverContent: string }>();
    - which will emit the newly added data
    - in cockpit we have buttons to add-server and add-bluePrintCreated
    - on click of that buttons we will emit above event
      - onAddServer() {
        // we are emitting our event and giving data
        this.serverCreated.emit({
          serverName: this.newServerName,
          serverContent: this.newServerContent
        });
      }
    - now we will need to listen this event in main app component
     - now app component have app-cockpit component
     - we will add app-cockpit event name into it like:
      - <app-cockpit (serverCreated)="onServerAddedInsideCockpit($event)"></app-cockpit>
      - serverCreated is event emitted from cockpit
      - whenever serverCreated is emitted, onServerAddedInsideCockpit will be called
      - onServerAddedInsideCockpit is placed inside app.component
      - so child component(cockpit) is emitting event and parent component(app) is listening it
      - you can put this ( <app-cockpit (serverCreated)="onServerAddedInsideCockpit($event)"></app-cockpit> ) in
        cockpit component only because this is the component which is emitting event
      - you can not bind this event in other component, because that component is not emitting this event
    - THIS IS HOW FLOW IS WORKING
      - 1. emit event from cockpit
      - 2. listen event in app.component by attaching app.component function to parameters of cockpit component
      - now whenever cockpit component add button is hit it will emit event
        as app component is listening it, it will execute the function on event

STYLES:
  - css style will be applied to particular component where it is written
  - if you put style p{ color: blue } inside app.component.css it will not apply to other component
  - angular selects it by applying dynamic attribute to component
  - like p['_ngContent-ejo-2']{ color: blue } like lightning UI

  - you can apply GLOBAL styles by putting it to '\src\styles.css'
   - ref of this can be found in angular.json file

  - you can disable this  behavior by adding parameter in component decorator
   - like
    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.css'],
      encapsulation: ViewEncapsulation.None // this one
    })
    - none will not apply this shadow dom thing
    - Emulated is default which will emulate shadow dom technology with angular8
    - ShadowDom will use browser's dom shadow technology which may not be supported by all browser

- LOCAL TEMPLATE REF (72)
- Here it can only be used inside template not in typescript file
- so in html template <input type="text" class="form-control" #serverNameInput>, we can give like
  this ( #serverNameInput ) it will serve as id of input
- then we can pass it as
  - <button (click)="onAddServer(serverNameInput)">Add Server</button>
  - now inside function we will get actual input dom element
  - we can do "serverNameInput.value" inside function lie:
    - onAddServer(nameInput) {  console.log( nameInput.value ) }

- TEMPLATE ELEMENT IN TS file
  - like above LOCAL TEMPLATE REF you can put
   - <input type="text" class="form-control" #serverNameInput>
   - now at initial level in ts file you can select it by:
    - @ViewChild('serverNameInput', {static: true}) serverNameInput: ElementRef;
    - now you can read it in ts file by this.serverNameInput.nativeElement.value
  - this is just another way of keeping ref as variable instead of passing it to function
  - also never access elements directly like this.serverNameInput.nativeElement.value = 'something'
    it is not recommended

  - we have contentChild as well
    - we passed something in ngContent from app component
    - means from app.component we are passing html inside server-element component
    - we have ngContent inside server-element component, where passed html is populating
    - now when something is populating inside ngContent, we can access it by contentChild
    - it is similar to viewChild


- Pass html from outside component
  - you can call like following
    - <app-server-element
        *ngFor="let serverElement of serverElementsAppCmp"
        [element]="serverElement"
        aliasOutside="Alias test">

        => this portion is inside app-server-element
        => so it will be ng-content for app-server-element's html template
        <p>
          <strong *ngIf="serverElement.type === 'server'" style="color: red">server: {{ serverElement.content }}</strong>
          <em *ngIf="serverElement.type === 'blueprint'">blueprint: {{ serverElement.content }}</em>
        </p>
      </app-server-element>

    - now inside component you can write ng-content tag like:
    <div class="panel-body">
      <ng-content></ng-content>
    </div>

    - it will place passed html inside ng-content tag

----------------------------
COMPONENT LIFE CYCLE
----------------------------
AT TIME OF INIT OF COMPONENT:

- ngOnChanges: Called after a bound input property changes, at time of creation as well
  - this will receive all @input or @output tagged elements
- ngOnInit: Called once the component is initialized [it will run after constructor]
- ngDoCheck: Called during every change detection run [template change, click like if anything changes]
  - whenever angular checks for any changes (like click, promise)
  - like, when you want to change something which angular is not picking up
- ngAfterContentInit: Called after content (ng-content) has been projected into view
  - when we inject html via ng content
- ngAfterContentChecked: Called every time the projected content has been checked
  -
- ngAfterViewInit: Called after the component’s view (and child views) has been initialized
- ngAfterViewChecked: Called every time the view (and child views) have been checked
- ngOnDestroy: Called once the component is about to be destroyed

- when you try to access some element with viewChild
  - you can access full element inside following hooks
    - ngAfterViewInit
    - ngAfterViewChecked

first constructor will be called, after that above hooks will come into picture.

-- how to remember:
  ngOnChanges
  ngOnInit
  ngDoCheck
  ngAfterContentInit
  ngAfterContentChecked
  ngAfterViewInit
  ngAfterViewChecked
  ngOnDestroy
--


DIRECTIVES:
- Attribute directives
  - looks like normal html attribute (possibly with data biding or event binding)
  - only affect/change the element they are added
- Structural directive
  - look like a normal html attribute but have a leading * (for desugaring)
  - affect a whole area in the DOM (elements get added/removed)
  - like *ngIf or *ngFor
    - behind the scenes * is converted to something else, there is no start operator
    - you can use *ngIf in normal html or
      - you can use [ngIf] oin ng-template

- Directive decorator
  - @Directive({
      selector: '[appBasicHighlight]' // generally camel case, this will be identified by attribute
    })
  - By adding this below, we will get access of element where we attached our directive
  export class BasicHighlightDirective implements OnInit {
    constructor(private elementRef: ElementRef) {}
    ngOnInit() {
      this.elementRef.nativeElement.style.backgroundColor = 'green';
    }
  }
- How to add?
 - go to app.module
 - import directive file on the top
 - add directive ref inside declarations
 - Sample
    declarations: [
      AppComponent,
      BasicHighlightDirective
    ]
- For better element referencing we should not use ElementRef instead we can use renderer (compare BasicHighlightDirective vs BetterHighlightDirective)
  - why renderer is good?
    - is not limited to browser
    - it also runs inside service workers  (where you might not have access to dom)
- We can make reactive directive as well via @HostListener
- like following:
  mouseenter/mouseleave or other events:
  @HostListener('mouseenter') mouseover(eventData: Event) {
    this.renderer.setStyle(this.eleRef.nativeElement, 'background-color', 'blue');
  }
- we can omit renderer as well by Using HostBinding to Bind to Host Properties
- like
  - @HostBinding('style.backgroundColor') backgroundColor: string; // access style.background as backgroundColor
  - @HostListener('mouseenter') mouseover(eventData: Event) {
      this.backgroundColor = 'blue'; // this will directly assign value to style
    }
- parameterized directive
  - now you can pass params via @Input (check BetterHighlightDirective) (97. binding directive Properties)

- for ng switch
<div [ngSwitch]="value">
  <p *ngSwitchCase="5">Value is 5</p>
  <p *ngSwitchCase="10">Value is 10</p>
  <p *ngSwitchCase="100">Value is 100</p>
  <p *ngSwitchDefault>Value is Default</p>
</div>

- Put code of toggle class in dropdown directive
 - what I thought?
  - Add click event HostListener
  - take renderer and add class and remove based on isOpen flag like below
   - constructor(private eleRef: ElementRef, private renderer: Renderer2) {}
   - @HostListener('click') toggleOpen(eventData: Event) {
      this.isOpen = !this.isOpen;
      if (this.isOpen) {
       this.renderer.removeClass(this.eleRef.nativeElement, 'open');
      } else {
       this.renderer.addClass(this.eleRef.nativeElement, 'open');
      }
    }
- what we can do with angular8
  - we can do as per following:
   @HostBinding ('class.open') isOpen: boolean = false;
   @HostListener('click') toggleOpen(eventData: Event) {
    this.isOpen = !this.isOpen;
   }
  dropdown directive
  -check es lint

- HOW DATA IS PASSED FROM CHILD TO PARENT:
  - recipe item -> on click event => onRecipeItemClicked
    - now it will emit the output recipeItemClickedPassedToList
  - recipe list <recipe-item recipeItemClickedPassedToList> binded recipeItemClickedReceivedIntoList
    - recipe list will emit recipeItemClickedPassedToRecipeMainComp
  - in recipe component <recipe-list recipeItemClickedPassedToRecipeMainComp> binded with recipeItemClickedReceivedIntoRecipeMainComp
  - now recipeItemClickedReceivedIntoRecipeMainComp will update selectedRecipe
  - now on recipe component selectedRecipe will be passed to another component

  - Summary
    Item:
      - (click) onRecipeItemClicked
      - @Output() recipeItemClickedPassedToList

    List:
      - binded recipeItemClickedReceivedIntoList to output of item cmp
      - @Output() recipeItemClickedPassedToRecipeMainComp
    
    Main:
      - binded recipeItemClickedReceivedIntoRecipeMainComp to output of list cmp-> update selectedRecipe
      - pass selectedRecipe to another component

    in short:
    - when child to parent passing?
      - in child use output, in parent bind some function to that output
      - in parent use output, in grand-parent bind some function to that output
    - so use output at child level and use output untill you need the data to upper level


:::::::::::::SERVICE Section9 : 106 Using Services & Dependency Injection:::::::::::::::::::

- Hierarchical injector 
  - Where we can inject services?
  - AppModule (top): Same instance of service is available at application-wide
  - AppComponent:  Same instance of service is available for all components (not for other services)
  - Any other component: Same instance of service is available for component and its child componnet

- We need to inform Angular that we need instance of service
- How to inform Angular?
  - Regular way (ref: new-account.component.ts)
    - import that service on the top
    - now in component inside providers you need to push this new service, so it will provide Angular this new service
    - now you can assign this service to constructor in component ts file
    - it will create instance for you
    - Sample:
      - import { LoggingService } from '../logging.service';
      - providers: [LoggingService]
      - constructor(private loggingService: LoggingService) {}
      - use? this.loggingService.logStatusChange(accountStatus);
  - Now at first I added account service to nine-service-start, account and new-account to all 3 components
   - all of them were not getting the same instance, instead they were creating their own instances
   - To overcome this, keep service in providers of top level component.
   - And remove from providers list of account and new-account
   - Now account and new-account will get the instance from top level component only

- Now inject servie inside service
  - To inject one service inside another
  - We need to decalre that service at app.module level which is the toppest one
  - So we can use that service in other service
  - To do that, we need to put angular meta data like how we add on component like @Component({
  - We can add @Injectable on top of service which will need some other service, Injectable means this is the service in which you can inject another one

- You can use emit in service as well
  - in service.ts you can create emittor like => statusUpdated = new EventEmitter<string>(); 
  - now in one component you can use, => this.accountService.statusUpdated.emit(status);
  - in another component you can subscribe => like (inside constructor)
    - constructor(private loggingService: LoggingService, private accountService: AccountService) {
    this.accountService.statusUpdated.subscribe(
        (status: string) => {
          console.log(`Event by emit and subscribe: ${status}`);
        }
      );
    }














